name: Tests
on:
   push:
     branches: [ master ]
   pull_request:
     branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3
  CONDA_ENV: ./environment.yml
  
jobs:
  build:

    name: Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.11"]
        runs-on: [ubuntu-latest, macos-latest]
        include:
          - os: macos-latest
            label: osx-64
            prefix: /Users/runner/miniconda3

          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3

    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge, defaults
          python-version: ${{ matrix.python-version }}
          channel-priority: strict
          show-channel-urls: true
          auto-update-conda: true
          activate-environment: tjpcov
          miniforge-version: latest
          miniforge-variant: Mambaforge

      - name: "macOS: set env variables"
        if: runner.os == 'macOS'
        run: |
          mamba install llvm-openmp
          SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CFLAGS="-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"
          export LDFLAGS="-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

      - name: Check for cached environment
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ matrix.prefix }}
          key:
            ${{matrix.os}}.conda-py.${{matrix.python-version}}.${{hashFiles('pyproject.toml')}}
  
      - name: Install environment packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export MAMBA_NO_BANNER=1
          mamba env update --file ${{ env.CONDA_ENV }} --prune
          
      - uses: psf/black@stable

      - name: Run flake8
        run: |
          pip install -U pip
          pip install -U flake8
          flake8 tjpcov tests
            
      - name: Install TJPCov
        run: |
          # We need to explicitly instally numpy first for namaster.
          pip install numpy 
          pip install .[full]

      - name: Run Tests
        run: |
          pytest -vv --ignore=tests/test_mpi.py  --cov=tjpcov
                 
      - name: Run Tests (OpenMPI)
        run: |
          pip install .[mpi]
          # Run MPI test (just the computation of blocks)
          mpiexec -n 2 pytest -vv tests/test_mpi.py --cov=tjpcov --cov-append

      - name: Run Tests (mpich)
        run: |
          mamba remove -y openmpi-cc
          pip uninstall -y mpi4py

          mamba install -y mpich
          pip install -U mpi4py --no-cache-dir

          mpiexec -n 2 pytest -vv tests/test_mpi.py --cov=tjpcov --cov-append

      - name: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          coveralls --service=github
